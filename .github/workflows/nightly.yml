name: Nightly Release

on:
  schedule:
    - cron: '0 5 * * *'
  workflow_dispatch:

jobs:
  build:

    runs-on: a100
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10"]

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Setup pip cache
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Compute version
      run: |
        package_version="$(printf '%(%Y%m%d)T.${{ github.run_number }}')"
        tag_name="${package_version}"
        echo "package_version=${package_version}" >> $GITHUB_ENV
        echo "tag_name=${tag_name}" >> $GITHUB_ENV    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.NODAI_INVOCATION_TOKEN }}
      with:
        tag_name: ${{ env.tag_name }}
        release_name: libtorch release ${{ env.tag_name }}
        body: |
          Automatic nightly release of libtorch
        draft: true
        prerelease: false        

    - name: Build and validate the package
      run: |
        cd $GITHUB_WORKSPACE
        
        
    - name: Upload Release Assets
      id: upload-release-assets
      uses: dwenegar/upload-release-assets@v1
      env:
        GITHUB_TOKEN: ${{ secrets.NODAI_INVOCATION_TOKEN }}
      with:
        release_id: ${{ steps.create_release.outputs.id }}
        assets_path: ./build/libtorch-*

    - name: Publish Release
      id: publish_release
      uses: eregon/publish-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.NODAI_INVOCATION_TOKEN }}
      with:
        release_id: ${{ steps.create_release.outputs.id }}
      
